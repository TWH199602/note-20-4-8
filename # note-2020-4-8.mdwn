# note-2020-4-8
## 单向链表
### 1.构建单向链表
  
    #include <stdlib.h>
    #include <stdio.h>

    typedef struct node {
        char* data; // 数据定义为字符串
        struct node* next; // 指向下一个节点
    } Node;

    void printList(Node* plist) {
        if (plist == NULL) {
            // 传进来的是个空指针，表示list还没有初始化
            printf("plist没有初始化\n");
            return;
        }
        
        // 打印当前节点的data部分，再找到下一个节点，直到没有下一个节点
        while(plist != NULL) {//当plist不为空
            printf("%s", plist->data);//打印plist指向的数据
            printf("->");//打印箭头“->”
            plist = plist->next;//再指向下一个节点
        }
        
        printf("NULL\n");
    }

### 2.增加单向链表元素

    Node* addAtPos(int pos, char* food, Node* head){//此时需要返回值"return;",新增一个链后整体发生了变化。
        // pos , food
        // modify list
        // new block
        Node* newNode = malloc(sizeof(Node));//为新增项分配内存空间
        newNode->data = food;//新增的数据为“food".
        if (pos == 0) {
            // 新增的节点在表头
            newNode->next = head;//新增加的节点的下一个节点为增加前链表的头节点
            return newNode;//链表发生变化，需要返回值。
        }
        
        Node* temp = head;//使用临时变量“temp”来保存“head”
        // pos 1 : head->next = newNode;
        // pos 2 : head->next->next = newNode;
        // pos == 2 那么需要偏移1次
        // pos == 3 偏移两次
        while(temp->next != NULL && pos > 1){
            temp = temp->next;
            pos--;
        }
        if (pos > 1) {
            // 插入的位置超过链表的长度，非法输入
            printf("插入的位置超过链表的长度，非法输入\n");
            return head;
        }
        newNode->next = temp->next;//当pos == 1,while循环不会执行，此时新节点的下一个节点为原头节点的下一个节点
        temp->next = newNode;//现在的头节点的下一个节点为新节点
        return head;
    }
### 3.删除单向链表元素
    Node* delAtPos(int pos, Node* head) {
        if (head == NULL) {//头节点为空
            //空链表
            printf("空链表无法删除任何节点\n");
            return NULL;
        }
        
        if (pos == 0) {
            // 删除头节点
            Node* temp = head->next;//头节点删除，头节点的下一个节点升格为头节点
            free(head);
            return temp;
        }
        
        Node* temp = head;
        // 找到pos的上一个节点
        while((pos > 1) && (temp != NULL)) {
            temp = temp->next;//原temp 的内存空间储存的数据变更为next,即temp=temp->next
            pos--;//位置减一
        }
        if (temp == NULL || temp->next == NULL) {
            // 出错啦
            printf("删除的位置超过链表的长度，非法输入\n");
            return head;
        }
        // 删除temp的下一个
        Node* t = temp->next;//t为temp的下一个节点
        temp->next = t->next;//此时temp的下一个节点为原先未删除的t的下一个节点“next”(temp->t(删除)->next)=>(temp->next)   
        free(t);
        return head;
    }

    int main() {
        // 初始化头结点
        Node* head = NULL; // head表示第一个节点的指针，头节点指向为空指针，因为此时未定义下一项
        printList(head);
        
        // 放鸡蛋
        Node* egg = malloc(sizeof(Node));//分配内存空间
        egg->data = "鸡蛋";//指针域为egg,数据域为“鸡蛋”
        egg->next = NULL;//egg下一项指向空，表示链表在此终结
        
        head = egg;//此时头节点为egg
        
        printList(head);
        
        // 放苹果
        Node* apple = malloc(sizeof(Node));
        apple->data = "苹果";
        apple->next = NULL;
        egg->next = apple;
        //apple->next = egg;
        //head = apple;
        printList(head);
        
        // 放牛奶
        Node* milk = malloc(sizeof(Node));
        milk->data = "牛奶";
        milk->next = NULL;
        apple->next = milk;
        printList(head);
        
        head = addAtPos(3, "花生", head);
        printList(head);
        
        head = delAtPos(4,head);
        printList(head);
    }
      